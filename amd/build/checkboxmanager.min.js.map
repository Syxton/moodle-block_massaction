{"version":3,"sources":["../src/checkboxmanager.js"],"names":["sectionBoxes","addCheckboxes","sections","moduleNames","forEach","section","number","moduleIds","modules","split","length","moduleNamesFiltered","filter","modinfo","includes","modid","toString","addCheckboxToModule","name","sectionNumber","moduleId","moduleName","boxId","cssIds","BOX_ID_PREFIX","moduleElement","document","getElementById","usedMoodleCssClasses","MODULE_ID_PREFIX","checkBoxElement","createElement","type","className","CHECKBOX_CLASS","id","checkboxDescription","constants","CHECKBOX_DESCRIPTION_SUFFIX","ariaLabel","insertBefore","firstChild","push","filterVisibleSections","every","moduleid","updateSelectionAndMoveToDropdowns","sectionsUnfiltered","sectionNamesInSelect","Array","prototype","map","call","SECTION_SELECT","options","option","text","shift","sectionsHaveChanged","JSON","stringify","Templates","renderForPromise","then","html","js","replaceNode","disableInvisibleAndEmptySections","addEventListener","event","target","value","catch","ex","MOVETO_SELECT","DUPLICATETO_SELECT","SECTION_SELECT_DESCRIPTION_VALUE","some","parseInt","disabled","checkboxmanager"],"mappings":"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","sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Checkbox manager amd module: Adds checkboxes to the activities for selecting and\n * generates a data structure of the activities and checkboxes.\n *\n * @module     block_massaction/checkboxmanager\n * @copyright  2022 ISB Bayern\n * @author     Philipp Memmel\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\nimport Templates from 'core/templates';\nimport {exception as displayException} from 'core/notification';\nimport {setSectionSelection} from './massactionblock';\nimport {cssIds, constants, usedMoodleCssClasses} from './massactionblock';\n\n/* A registry of checkbox IDs, of the format:\n *  'section_number' => [{'moduleId'   : <module-ID>,\n *                       'boxId'       : <checkbox_id>}]\n */\nconst sectionBoxes = {};\n\n/**\n * The checkbox manager takes a given 'sections' data structure object and inserts a checkbox for each of the given\n * course modules in this data object into the DOM.\n * The checkbox manager returns another data object containing the ids of the added checkboxes.\n *\n * @param {[]} sections the sections structure injected by the PHP method or the corresponding webservice call.\n * @param {[]} moduleNames array of module information objects: {modid: MODID, name: MOD_NAME}\n * @returns {{}} sectionBoxes a data structure containing the ids of the added checkboxes for the course modules.\n */\nconst checkboxmanager = (sections, moduleNames) => {\n    // Filter available sections and modules.\n    const sectionsUnfiltered = sections;\n    sections = filterVisibleSections(sections);\n    updateSelectionAndMoveToDropdowns(sections, sectionsUnfiltered);\n    addCheckboxes(sections, moduleNames);\n    return sectionBoxes;\n};\n\n/**\n * Add checkboxes to all sections.\n *\n * @param {[]} sections the sections data object\n * @param {[]} moduleNames array of module information objects: {modid: MODID, name: MOD_NAME}\n */\nconst addCheckboxes = (sections, moduleNames) => {\n    sections.forEach(section => {\n        sectionBoxes[section.number] = [];\n        const moduleIds = section.modules.split(',');\n        if (moduleIds && moduleIds.length > 0 && moduleIds[0] !== '') {\n            const moduleNamesFiltered = moduleNames.filter(modinfo => moduleIds.includes(modinfo.modid.toString()));\n            moduleNamesFiltered.forEach(modinfo => {\n                addCheckboxToModule(section.number, modinfo.modid.toString(), modinfo.name);\n            });\n        }\n    });\n};\n\n\n/**\n * Add a checkbox to a module element\n *\n * @param {number} sectionNumber number of the section of the current course module\n * @param {number} moduleId id of the current course module\n * @param {string} moduleName name of the course module specified by moduleId\n */\nconst addCheckboxToModule = (sectionNumber, moduleId, moduleName) => {\n    const boxId = cssIds.BOX_ID_PREFIX + moduleId;\n    const moduleElement = document.getElementById(usedMoodleCssClasses.MODULE_ID_PREFIX + moduleId);\n\n    // Avoid creating duplicate checkboxes.\n    if (document.getElementById(boxId) === null) {\n        // Add the checkbox.\n        const checkBoxElement = document.createElement('input');\n        checkBoxElement.type = 'checkbox';\n        checkBoxElement.className = cssIds.CHECKBOX_CLASS;\n        checkBoxElement.id = boxId;\n\n        if (moduleElement !== null) {\n            const checkboxDescription = moduleName + constants.CHECKBOX_DESCRIPTION_SUFFIX;\n            checkBoxElement.ariaLabel = checkboxDescription;\n            checkBoxElement.name = checkboxDescription;\n            // Finally add the created checkbox element.\n            moduleElement.insertBefore(checkBoxElement, moduleElement.firstChild);\n        }\n    }\n\n    // Add the newly created checkbox to our data structure.\n    sectionBoxes[sectionNumber].push({\n        'moduleId': moduleId,\n        'boxId': boxId,\n    });\n};\n\n/**\n * Filter the sections data object depending on the visibility of the course modules contained in\n * the data object. This is neccessary, because some course formats only show specific section(s)\n * in editing mode.\n *\n * @param {[]} sections the sections data object\n * @returns {[]} the filtered sections object\n */\nconst filterVisibleSections = (sections) => {\n    // Filter all sections with modules which no checkboxes have been created for.\n    // This case should only occur in course formats where some sections are hidden.\n    return sections.filter(section => section.modules.split(',')\n        .every(moduleid => document.getElementById(usedMoodleCssClasses.MODULE_ID_PREFIX + moduleid) !== null));\n};\n\n/**\n * Update the selection, moveto and duplicateto dropdowns of the massaction block according to the\n * previously filtered sections.\n *\n * @param {[]} sections the sections object filtered before by {@link filterVisibleSections}\n * @param {[]} sectionsUnfiltered the same data object as 'sections', but still containing all sections\n * no matter if containing modules or are visible in the current course format or not\n */\nconst updateSelectionAndMoveToDropdowns = (sections, sectionsUnfiltered) => {\n    // Easy way to check if the name of a section or the order of sections have been changed.\n    // If we have a change, we need to rebuild the dropdowns from templates.\n    const sectionNamesInSelect =\n        Array.prototype.map.call(document.getElementById(cssIds.SECTION_SELECT).options, option => option.text);\n    // Remove placeholder (first option item in select), would disturb in the next comparison.\n    sectionNamesInSelect.shift();\n    const sectionsHaveChanged =\n        JSON.stringify(sectionsUnfiltered.map(section => section.name)) !== JSON.stringify(sectionNamesInSelect);\n\n    if (sectionsHaveChanged) {\n        Templates.renderForPromise('block_massaction/section_select', {'sections': sectionsUnfiltered})\n            .then(({html, js}) => {\n                Templates.replaceNode('#' + cssIds.SECTION_SELECT, html, js);\n                disableInvisibleAndEmptySections(sections);\n                // Re-register event listener.\n                document.getElementById(cssIds.SECTION_SELECT).addEventListener('click',\n                    (event) => setSectionSelection(true, event.target.value), false);\n                return true;\n            })\n            .catch(ex => displayException(ex));\n\n        Templates.renderForPromise('block_massaction/moveto_select', {'sections': sectionsUnfiltered})\n            .then(({html, js}) => {\n                Templates.replaceNode('#' + cssIds.MOVETO_SELECT, html, js);\n                return true;\n            })\n            .catch(ex => displayException(ex));\n\n        Templates.renderForPromise('block_massaction/duplicateto_select', {'sections': sectionsUnfiltered})\n            .then(({html, js}) => {\n                Templates.replaceNode('#' + cssIds.DUPLICATETO_SELECT, html, js);\n                return true;\n            })\n            .catch(ex => displayException(ex));\n    } else {\n        // Only disable invisible and empty sections without going through the whole rebuilding process first.\n        disableInvisibleAndEmptySections(sections);\n    }\n};\n\n/**\n * Sets the disabled/enabled status of sections in the section select dropdown:\n * Enabled if section is visible and contains modules.\n * Disabled if section is not visible or doesn't contain any modules.\n *\n * @param {[]} sections the section data structure\n */\nconst disableInvisibleAndEmptySections = (sections) => {\n    Array.prototype.forEach.call(document.getElementById(cssIds.SECTION_SELECT).options, option => {\n        // Disable every element which doesn't have a visible section, except the placeholder ('description').\n        if (option.value !== constants.SECTION_SELECT_DESCRIPTION_VALUE\n                && !sections.some(section => parseInt(option.value) === section.number)) {\n            option.disabled = true;\n        } else {\n            option.disabled = false;\n        }\n    });\n};\n\nexport default checkboxmanager;\n"],"file":"checkboxmanager.min.js"}