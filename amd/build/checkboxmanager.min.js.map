{"version":3,"file":"checkboxmanager.min.js","sources":["../src/checkboxmanager.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Checkbox manager amd module: Adds checkboxes to the activities for selecting and\n * generates a data structure of the activities and checkboxes.\n *\n * @module     block_massaction/checkboxmanager\n * @copyright  2022 ISB Bayern\n * @author     Philipp Memmel\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\nimport Templates from 'core/templates';\nimport {exception as displayException} from 'core/notification';\nimport {setSectionSelection} from './massactionblock';\nimport {cssIds, constants, usedMoodleCssClasses} from './massactionblock';\n\n/* A registry of checkbox IDs, of the format:\n *  'section_number' => [{'moduleId'   : <module-ID>,\n *                       'boxId'       : <checkbox_id>}]\n */\nconst sectionBoxes = {};\n\n/**\n * The checkbox manager takes a given 'sections' data structure object and inserts a checkbox for each of the given\n * course modules in this data object into the DOM.\n * The checkbox manager returns another data object containing the ids of the added checkboxes.\n *\n * @param {[]} sections the sections structure injected by the PHP method or the corresponding webservice call.\n * @param {[]} moduleNames array of module information objects: {modid: MODID, name: MOD_NAME}\n * @returns {{}} sectionBoxes a data structure containing the ids of the added checkboxes for the course modules.\n */\nconst checkboxmanager = (sections, moduleNames) => {\n    // Filter available sections and modules.\n    const sectionsUnfiltered = sections;\n    sections = filterVisibleSections(sections);\n    updateSelectionAndMoveToDropdowns(sections, sectionsUnfiltered);\n    addCheckboxes(sections, moduleNames);\n    return sectionBoxes;\n};\n\n/**\n * Add checkboxes to all sections.\n *\n * @param {[]} sections the sections data object\n * @param {[]} moduleNames array of module information objects: {modid: MODID, name: MOD_NAME}\n */\nconst addCheckboxes = (sections, moduleNames) => {\n    sections.forEach(section => {\n        sectionBoxes[section.number] = [];\n        const moduleIds = section.modules.split(',');\n        if (moduleIds && moduleIds.length > 0 && moduleIds[0] !== '') {\n            const moduleNamesFiltered = moduleNames.filter(modinfo => moduleIds.includes(modinfo.modid.toString()));\n            moduleNamesFiltered.forEach(modinfo => {\n                addCheckboxToModule(section.number, modinfo.modid.toString(), modinfo.name);\n            });\n        }\n    });\n};\n\n\n/**\n * Add a checkbox to a module element\n *\n * @param {number} sectionNumber number of the section of the current course module\n * @param {number} moduleId id of the current course module\n * @param {string} moduleName name of the course module specified by moduleId\n */\nconst addCheckboxToModule = (sectionNumber, moduleId, moduleName) => {\n    const boxId = cssIds.BOX_ID_PREFIX + moduleId;\n    const moduleElement = document.getElementById(usedMoodleCssClasses.MODULE_ID_PREFIX + moduleId);\n\n    // Avoid creating duplicate checkboxes.\n    if (document.getElementById(boxId) === null) {\n        // Add the checkbox.\n        const checkBoxElement = document.createElement('input');\n        checkBoxElement.type = 'checkbox';\n        checkBoxElement.className = cssIds.CHECKBOX_CLASS;\n        checkBoxElement.id = boxId;\n\n        if (moduleElement !== null) {\n            const checkboxDescription = moduleName + constants.CHECKBOX_DESCRIPTION_SUFFIX;\n            checkBoxElement.ariaLabel = checkboxDescription;\n            checkBoxElement.name = checkboxDescription;\n            // Finally add the created checkbox element.\n            moduleElement.insertBefore(checkBoxElement, moduleElement.firstChild);\n        }\n    }\n\n    // Add the newly created checkbox to our data structure.\n    sectionBoxes[sectionNumber].push({\n        'moduleId': moduleId,\n        'boxId': boxId,\n    });\n};\n\n/**\n * Filter the sections data object depending on the visibility of the course modules contained in\n * the data object. This is neccessary, because some course formats only show specific section(s)\n * in editing mode.\n *\n * @param {[]} sections the sections data object\n * @returns {[]} the filtered sections object\n */\nconst filterVisibleSections = (sections) => {\n    // Filter all sections with modules which no checkboxes have been created for.\n    // This case should only occur in course formats where some sections are hidden.\n    return sections.filter(section => section.modules.split(',')\n        .every(moduleid => document.getElementById(usedMoodleCssClasses.MODULE_ID_PREFIX + moduleid) !== null));\n};\n\n/**\n * Update the selection, moveto and duplicateto dropdowns of the massaction block according to the\n * previously filtered sections.\n *\n * @param {[]} sections the sections object filtered before by {@link filterVisibleSections}\n * @param {[]} sectionsUnfiltered the same data object as 'sections', but still containing all sections\n * no matter if containing modules or are visible in the current course format or not\n */\nconst updateSelectionAndMoveToDropdowns = (sections, sectionsUnfiltered) => {\n    // Easy way to check if the name of a section or the order of sections have been changed.\n    // If we have a change, we need to rebuild the dropdowns from templates.\n    const sectionNamesInSelect =\n        Array.prototype.map.call(document.getElementById(cssIds.SECTION_SELECT).options, option => option.text);\n    // Remove placeholder (first option item in select), would disturb in the next comparison.\n    sectionNamesInSelect.shift();\n    const sectionsHaveChanged =\n        JSON.stringify(sectionsUnfiltered.map(section => section.name)) !== JSON.stringify(sectionNamesInSelect);\n\n    if (sectionsHaveChanged) {\n        Templates.renderForPromise('block_massaction/section_select', {'sections': sectionsUnfiltered})\n            .then(({html, js}) => {\n                Templates.replaceNode('#' + cssIds.SECTION_SELECT, html, js);\n                disableInvisibleAndEmptySections(sections);\n                // Re-register event listener.\n                document.getElementById(cssIds.SECTION_SELECT).addEventListener('click',\n                    (event) => setSectionSelection(true, event.target.value), false);\n                return true;\n            })\n            .catch(ex => displayException(ex));\n\n        Templates.renderForPromise('block_massaction/moveto_select', {'sections': sectionsUnfiltered})\n            .then(({html, js}) => {\n                Templates.replaceNode('#' + cssIds.MOVETO_SELECT, html, js);\n                return true;\n            })\n            .catch(ex => displayException(ex));\n\n        Templates.renderForPromise('block_massaction/duplicateto_select', {'sections': sectionsUnfiltered})\n            .then(({html, js}) => {\n                Templates.replaceNode('#' + cssIds.DUPLICATETO_SELECT, html, js);\n                return true;\n            })\n            .catch(ex => displayException(ex));\n    } else {\n        // Only disable invisible and empty sections without going through the whole rebuilding process first.\n        disableInvisibleAndEmptySections(sections);\n    }\n};\n\n/**\n * Sets the disabled/enabled status of sections in the section select dropdown:\n * Enabled if section is visible and contains modules.\n * Disabled if section is not visible or doesn't contain any modules.\n *\n * @param {[]} sections the section data structure\n */\nconst disableInvisibleAndEmptySections = (sections) => {\n    Array.prototype.forEach.call(document.getElementById(cssIds.SECTION_SELECT).options, option => {\n        // Disable every element which doesn't have a visible section, except the placeholder ('description').\n        if (option.value !== constants.SECTION_SELECT_DESCRIPTION_VALUE\n                && !sections.some(section => parseInt(option.value) === section.number)) {\n            option.disabled = true;\n        } else {\n            option.disabled = false;\n        }\n    });\n};\n\nexport default checkboxmanager;\n"],"names":["sectionBoxes","addCheckboxes","sections","moduleNames","forEach","section","number","moduleIds","modules","split","length","filter","modinfo","includes","modid","toString","addCheckboxToModule","name","sectionNumber","moduleId","moduleName","boxId","cssIds","BOX_ID_PREFIX","moduleElement","document","getElementById","usedMoodleCssClasses","MODULE_ID_PREFIX","checkBoxElement","createElement","type","className","CHECKBOX_CLASS","id","checkboxDescription","constants","CHECKBOX_DESCRIPTION_SUFFIX","ariaLabel","insertBefore","firstChild","push","filterVisibleSections","every","moduleid","updateSelectionAndMoveToDropdowns","sectionsUnfiltered","sectionNamesInSelect","Array","prototype","map","call","SECTION_SELECT","options","option","text","shift","JSON","stringify","renderForPromise","then","html","js","replaceNode","disableInvisibleAndEmptySections","addEventListener","event","target","value","catch","ex","MOVETO_SELECT","DUPLICATETO_SELECT","SECTION_SELECT_DESCRIPTION_VALUE","some","parseInt","disabled"],"mappings":";;;;;;;;;uJAkCMA,aAAe,GA0BfC,cAAgB,SAACC,SAAUC,aAC7BD,SAASE,SAAQ,SAAAC,SACbL,aAAaK,QAAQC,QAAU,OACzBC,UAAYF,QAAQG,QAAQC,MAAM,KACpCF,WAAaA,UAAUG,OAAS,GAAsB,KAAjBH,UAAU,IACnBJ,YAAYQ,QAAO,SAAAC,gBAAWL,UAAUM,SAASD,QAAQE,MAAMC,eACvEX,SAAQ,SAAAQ,SACxBI,oBAAoBX,QAAQC,OAAQM,QAAQE,MAAMC,WAAYH,QAAQK,aAchFD,oBAAsB,SAACE,cAAeC,SAAUC,gBAC5CC,MAAQC,wBAAOC,cAAgBJ,SAC/BK,cAAgBC,SAASC,eAAeC,sCAAqBC,iBAAmBT,aAG/C,OAAnCM,SAASC,eAAeL,OAAiB,KAEnCQ,gBAAkBJ,SAASK,cAAc,YAC/CD,gBAAgBE,KAAO,WACvBF,gBAAgBG,UAAYV,wBAAOW,eACnCJ,gBAAgBK,GAAKb,MAEC,OAAlBG,cAAwB,KAClBW,oBAAsBf,WAAagB,2BAAUC,4BACnDR,gBAAgBS,UAAYH,oBAC5BN,gBAAgBZ,KAAOkB,oBAEvBX,cAAce,aAAaV,gBAAiBL,cAAcgB,aAKlExC,aAAakB,eAAeuB,KAAK,UACjBtB,eACHE,SAYXqB,sBAAwB,SAACxC,iBAGpBA,SAASS,QAAO,SAAAN,gBAAWA,QAAQG,QAAQC,MAAM,KACnDkC,OAAM,SAAAC,iBAA0F,OAA9EnB,SAASC,eAAeC,sCAAqBC,iBAAmBgB,iBAWrFC,kCAAoC,SAAC3C,SAAU4C,wBAG3CC,qBACFC,MAAMC,UAAUC,IAAIC,KAAK1B,SAASC,eAAeJ,wBAAO8B,gBAAgBC,SAAS,SAAAC,eAAUA,OAAOC,QAEtGR,qBAAqBS,QAEjBC,KAAKC,UAAUZ,mBAAmBI,KAAI,SAAA7C,gBAAWA,QAAQY,WAAWwC,KAAKC,UAAUX,0CAGzEY,iBAAiB,kCAAmC,UAAab,qBACtEc,MAAK,mBAAEC,UAAAA,KAAMC,QAAAA,6BACAC,YAAY,IAAMzC,wBAAO8B,eAAgBS,KAAMC,IACzDE,iCAAiC9D,UAEjCuB,SAASC,eAAeJ,wBAAO8B,gBAAgBa,iBAAiB,SAC5D,SAACC,cAAU,yCAAoB,EAAMA,MAAMC,OAAOC,UAAQ,IACvD,KAEVC,OAAM,SAAAC,WAAM,2BAAiBA,0BAExBX,iBAAiB,iCAAkC,UAAab,qBACrEc,MAAK,oBAAEC,WAAAA,KAAMC,SAAAA,6BACAC,YAAY,IAAMzC,wBAAOiD,cAAeV,KAAMC,KACjD,KAEVO,OAAM,SAAAC,WAAM,2BAAiBA,0BAExBX,iBAAiB,sCAAuC,UAAab,qBAC1Ec,MAAK,oBAAEC,WAAAA,KAAMC,SAAAA,6BACAC,YAAY,IAAMzC,wBAAOkD,mBAAoBX,KAAMC,KACtD,KAEVO,OAAM,SAAAC,WAAM,2BAAiBA,QAGlCN,iCAAiC9D,WAWnC8D,iCAAmC,SAAC9D,UACtC8C,MAAMC,UAAU7C,QAAQ+C,KAAK1B,SAASC,eAAeJ,wBAAO8B,gBAAgBC,SAAS,SAAAC,QAE7EA,OAAOc,QAAUhC,2BAAUqC,kCACnBvE,SAASwE,MAAK,SAAArE,gBAAWsE,SAASrB,OAAOc,SAAW/D,QAAQC,UAGpEgD,OAAOsB,UAAW,EAFlBtB,OAAOsB,UAAW,eA5IN,SAAC1E,SAAUC,iBAEzB2C,mBAAqB5C,gBAC3BA,SAAWwC,sBAAsBxC,UACjC2C,kCAAkC3C,SAAU4C,oBAC5C7C,cAAcC,SAAUC,aACjBH"}