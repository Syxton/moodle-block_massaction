{"version":3,"file":"massactionblock.min.js","sources":["../src/massactionblock.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Main module for the massaction block.\n *\n * @module     block_massaction/massactionblock\n * @copyright  2022 ISB Bayern\n * @author     Philipp Memmel\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\nimport checkboxManager from './checkboxmanager';\nimport * as Str from 'core/str';\nimport Ajax from 'core/ajax';\nimport Pending from 'core/pending';\n\nlet sectionBoxes = {};\nlet isRebuilding = false;\n\nexport const usedMoodleCssClasses = {\n    SECTION_NAME: 'sectionname',\n    MODULE_ID_PREFIX: 'module-',\n    SPINNER: 'spinner',\n    DNDUPLOAD: 'dndupload-progress-outer',\n};\n\nexport const cssIds = {\n    SELECT_ALL_LINK: 'block-massaction-control-selectall',\n    DESELECT_ALL_LINK: 'block-massaction-control-deselectall',\n    HIDE_LINK: 'block-massaction-action-hide',\n    SHOW_LINK: 'block-massaction-action-show',\n    MAKE_AVAILABLE_LINK: 'block-massaction-action-makeavailable',\n    DUPLICATE_LINK: 'block-massaction-action-duplicate',\n    DELETE_LINK: 'block-massaction-action-delete',\n    MOVELEFT_LINK: 'block-massaction-action-moveleft',\n    MOVERIGHT_LINK: 'block-massaction-action-moveright',\n    MOVETO_ICON_LINK: 'block-massaction-action-moveto',\n    DUPLICATETO_ICON_LINK: 'block-massaction-action-duplicateto',\n    SECTION_SELECT: 'block-massaction-control-section-list-select',\n    MOVETO_SELECT: 'block-massaction-control-section-list-moveto',\n    DUPLICATETO_SELECT: 'block-massaction-control-section-list-duplicateto',\n    BOX_ID_PREFIX: 'block-massaction-module-selector-',\n    CHECKBOX_CLASS: 'block-massaction-checkbox',\n    HIDDEN_FIELD_REQUEST_INFORMATION: 'block-massaction-control-request',\n    ACTION_FORM: 'block-massaction-control-form',\n};\n\nexport const constants = {\n    SECTION_SELECT_DESCRIPTION_VALUE: 'description',\n    SECTION_NUMBER_ALL_PLACEHOLDER: 'all',\n    CHECKBOX_DESCRIPTION_SUFFIX: ' Checkbox'\n};\n\nconst actions = {\n    HIDE: 'hide',\n    SHOW: 'show',\n    MAKE_AVAILABLE: 'makeavailable',\n    DUPLICATE: 'duplicate',\n    DELETE: 'delete',\n    MOVE_LEFT: 'moveleft',\n    MOVE_RIGHT: 'moveright',\n    MOVE_TO: 'moveto',\n    DUPLICATE_TO: 'duplicateto',\n};\n\n/**\n * Initialize the mass-action block.\n *\n * @param {int} courseId the id of the current course.\n */\nexport const init = async(courseId) => {\n\n    const pendingPromise = new Pending('block_massaction/init');\n    rebuildSections(courseId);\n\n    /*\n     * This is definitely not what you want to do, but there is probably no better way:\n     * Observe all changes to the DOM of the body, and filter the correct mutations to get the following events:\n     * - Drag&Drop moving of a module\n     * - Drag&Drop upload of files\n     * - Change of section names\n     * - Drag&Drop moving of sections\n     * In all cases: get new information from webservice and re-render the plugin.\n     * Care: It doesn't react to renaming of modules, because it's only relevant for name/aria-label of the\n     * checkboxes. This slight imperfection is being ignored in favour of performance.\n     */\n    const observer = new MutationObserver(function(mutations) {\n        mutations = mutations.filter(mutation => mutation.type === 'childList');\n        const mutationsSection = mutations\n            .filter(mutation => mutation.addedNodes && mutation.addedNodes.length > 0);\n        // Typical MutationObserver record pattern if two sections have been swapped:\n        // The MutationRecord contains two newly added elements, both of them have a 'sectionname' class.\n        if (mutationsSection.length === 2\n            && mutationsSection.every(mutation => mutation.target.classList.contains(usedMoodleCssClasses.SECTION_NAME))) {\n            rebuildSections(courseId);\n            // We already triggered the rebuild, no need to search for further mutation observer events.\n            return;\n        }\n\n        // Build the node tree recursively to later check if some of the objects has been removed.\n        const mutationsActivities = mutations\n            .filter(mutation => mutation.removedNodes && mutation.removedNodes.length > 0);\n        let allRemovedNodes = [];\n        mutationsActivities.forEach(item => {\n            const descendants = getAllDescendants(item.removedNodes);\n            if (descendants) {\n                allRemovedNodes = allRemovedNodes.concat(descendants);\n            }\n        });\n\n        if (allRemovedNodes.length > 0) {\n            // First remove all text nodes (nodeType 3).\n            allRemovedNodes.filter(node => node.nodeType !== 3).forEach(node => {\n                // Then check if a spinner has been removed (indicates end of drag'n'drop move and changing of section name) or\n                // if a dndupload-progress-outer item has been removed -> indicates a finished drag'n'drop file upload.\n                if (node.classList && node.classList.contains(usedMoodleCssClasses.SPINNER)\n                    || node.classList.contains(usedMoodleCssClasses.DNDUPLOAD)) {\n                    rebuildSections(courseId);\n                }\n            });\n        }\n    });\n\n    // Activate the mutation observer for tracking drag'n'drop changes.\n    // Unfortunately there seems to be some moodle JS which is loaded AFTER the readystatechange event has been set to 'completed'.\n    // Thus, we have to go for an additional timeout to wait for it.\n    document.addEventListener('readystatechange', event => {\n        if (event.target.readyState === 'complete') {\n            setTimeout(() => observer.observe(document.body, {\n                subtree: true,\n                childList: true,\n                attributes: false,\n                characterData: false\n            }), 1000);\n        }\n    });\n\n    document.getElementById(cssIds.SELECT_ALL_LINK)?.addEventListener('click',\n        () => setSectionSelection(true, constants.SECTION_NUMBER_ALL_PLACEHOLDER), false);\n\n    document.getElementById(cssIds.DESELECT_ALL_LINK)?.addEventListener('click',\n        () => setSectionSelection(false, constants.SECTION_NUMBER_ALL_PLACEHOLDER), false);\n\n    document.getElementById(cssIds.HIDE_LINK)?.addEventListener('click',\n        () => submitAction(actions.HIDE), false);\n\n    document.getElementById(cssIds.SHOW_LINK)?.addEventListener('click',\n        () => submitAction(actions.SHOW), false);\n\n    document.getElementById(cssIds.MAKE_AVAILABLE_LINK)?.addEventListener('click',\n        () => submitAction(actions.MAKE_AVAILABLE), false);\n\n    document.getElementById(cssIds.DUPLICATE_LINK)?.addEventListener('click',\n        () => submitAction(actions.DUPLICATE), false);\n\n    document.getElementById(cssIds.DELETE_LINK)?.addEventListener('click',\n        () => submitAction(actions.DELETE), false);\n\n    document.getElementById(cssIds.MOVELEFT_LINK)?.addEventListener('click',\n        () => submitAction(actions.MOVE_LEFT), false);\n\n    document.getElementById(cssIds.MOVERIGHT_LINK)?.addEventListener('click',\n        () => submitAction(actions.MOVE_RIGHT), false);\n\n    document.getElementById(cssIds.MOVETO_ICON_LINK)?.addEventListener('click',\n        () => submitAction(actions.MOVE_TO), false);\n\n    document.getElementById(cssIds.DUPLICATETO_ICON_LINK)?.addEventListener('click',\n        () => submitAction(actions.DUPLICATE_TO), false);\n\n    pendingPromise.resolve();\n};\n\n/**\n * Select all module checkboxes in section(s).\n *\n * @param {boolean} value the checked value to set the checkboxes to\n * @param {string} sectionNumber the section number of the section which all modules should be checked/unchecked. Use \"all\" to\n * select/deselect modules in all sections.\n */\nexport const setSectionSelection = (value, sectionNumber) => {\n    const boxIds = [];\n\n    if (typeof sectionNumber !== 'undefined' && sectionNumber === constants.SECTION_SELECT_DESCRIPTION_VALUE) {\n        // Description placeholder has been selected, do nothing.\n        return;\n    } else if (typeof sectionNumber !== 'undefined' && sectionNumber === constants.SECTION_NUMBER_ALL_PLACEHOLDER) {\n        // See if we are toggling all sections.\n        for (const sectionId in sectionBoxes) {\n            for (let j = 0; j < sectionBoxes[sectionId].length; j++) {\n                boxIds.push(sectionBoxes[sectionId][j].boxId);\n            }\n        }\n    } else {\n        // We select all boxes of the given section.\n        sectionBoxes[sectionNumber].forEach(box => boxIds.push(box.boxId));\n    }\n    // Un/check the boxes.\n    for (let i = 0; i < boxIds.length; i++) {\n        document.getElementById(boxIds[i]).checked = value;\n    }\n};\n\n/**\n * Submit the selected action to server.\n *\n * @param {string} action\n * @return {boolean} true if action was successful, false otherwise\n */\nconst submitAction = (action) => {\n    const submitData = {\n        'action': action,\n        'moduleIds': []\n    };\n\n    // Get the checked box IDs.\n    for (let sectionNumber in sectionBoxes) {\n        for (let i = 0; i < sectionBoxes[sectionNumber].length; i++) {\n            const checkbox = document.getElementById(sectionBoxes[sectionNumber][i].boxId);\n            if (checkbox.checked) {\n                submitData.moduleIds.push(sectionBoxes[sectionNumber][i].moduleId);\n            }\n        }\n    }\n\n    // Verify that at least one checkbox is checked.\n    if (submitData.moduleIds.length === 0) {\n        displayError(Str.get_string('noitemselected', 'block_massaction'));\n        return false;\n    }\n\n    // Prep the submission.\n    switch (action) {\n        case actions.HIDE:\n        case actions.SHOW:\n        case actions.MAKE_AVAILABLE:\n        case actions.DUPLICATE:\n        case actions.MOVE_LEFT:\n        case actions.MOVE_RIGHT:\n            break;\n\n        case actions.DELETE:\n            // Confirm.\n            break;\n\n        case actions.MOVE_TO:\n            // Get the target section.\n            submitData.moveToTarget = document.getElementById(cssIds.MOVETO_SELECT).value;\n            if (submitData.moveToTarget.trim() === '') {\n                displayError(Str.get_string('nomovingtargetselected', 'block_massaction'));\n                return false;\n            }\n            break;\n\n        case actions.DUPLICATE_TO:\n            // Get the target section.\n            submitData.duplicateToTarget = document.getElementById(cssIds.DUPLICATETO_SELECT).value;\n            if (submitData.duplicateToTarget.trim() === '') {\n                displayError(Str.get_string('nomovingtargetselected', 'block_massaction'));\n                return false;\n            }\n            break;\n        default:\n            displayError('Unknown action: ' + action + '. Coding error.');\n            return false;\n    }\n    // Set the form value and submit.\n    document.getElementById(cssIds.HIDDEN_FIELD_REQUEST_INFORMATION).value = JSON.stringify(submitData);\n    document.getElementById(cssIds.ACTION_FORM).submit();\n    return true;\n};\n\nconst displayError = (errorText) => {\n    Promise.resolve([Str.get_string('error', 'core'), errorText, Str.get_string('back', 'core')]).then(text => {\n        require(['core/notification'], function(notification) {\n            notification.alert(text[0], text[1], text[2]).then().catch();\n        });\n        return null;\n    }).catch();\n};\n\n/**\n * This method rebuilds the data structure stored in 'sections'. This is neccessary whenever a drag'n'drop\n * operation is being done in the course which leads to a change of the section information. It calls a\n * webservice to retrieve the updated section (and modules) data.\n *\n * This method implements a mechanism to only send a single request at once. Multiple requests arriving while\n * the promise for the request hasn't been resolved yet are being ignored.\n *\n * @param {number} courseId the course id of the course to get the section information from the webservice\n */\nconst rebuildSections = (courseId) => {\n    // Only rebuild if we're not yet trying to get the new data from the webservice.\n    if (isRebuilding) {\n        return;\n    }\n\n    isRebuilding = true;\n    // Setting a hardcoded timeout like this is ugly, but due to a hardcoded timeout in the yui library\n    // there probably is no better way to handle this.\n    setTimeout(() => {\n        const promises = Ajax.call(\n            [\n                {\n                    methodname: 'block_massaction_get_sections',\n                    args: {'courseId': courseId},\n                },\n                {\n                    methodname: 'block_massaction_get_modulesinfo',\n                    args: {'courseId': courseId},\n                }\n            ]);\n\n        Promise.all([promises[0], promises[1]]).then(data => {\n            // The array data[0] contains sections information, data[1] the module names.\n            sectionBoxes = checkboxManager(data[0], data[1]);\n            isRebuilding = false;\n            return true;\n        }).catch(() => {\n            isRebuilding = false;\n            return false;\n        });\n    }, 1000);\n};\n\n/**\n * Utility method to get an array of all descendent nodes of a given nodeList recursively.\n *\n * @param {NodeList} nodes The NodeList to convert to a flat array of nodes.\n * @return {[Node]} array of recursively found nodes.\n */\nconst getAllDescendants = (nodes) => {\n    const allNodes = [];\n    const getDescendants = (node) => {\n        for (let i = 0; i < node.childNodes.length; i++) {\n            const child = node.childNodes[i];\n            getDescendants(child);\n            allNodes.push(child);\n        }\n    };\n    for (let j = 0; j < nodes.length; j++) {\n        getDescendants(nodes[j]);\n    }\n    return allNodes;\n};\n"],"names":["sectionBoxes","isRebuilding","usedMoodleCssClasses","SECTION_NAME","MODULE_ID_PREFIX","SPINNER","DNDUPLOAD","cssIds","SELECT_ALL_LINK","DESELECT_ALL_LINK","HIDE_LINK","SHOW_LINK","MAKE_AVAILABLE_LINK","DUPLICATE_LINK","DELETE_LINK","MOVELEFT_LINK","MOVERIGHT_LINK","MOVETO_ICON_LINK","DUPLICATETO_ICON_LINK","SECTION_SELECT","MOVETO_SELECT","DUPLICATETO_SELECT","BOX_ID_PREFIX","CHECKBOX_CLASS","HIDDEN_FIELD_REQUEST_INFORMATION","ACTION_FORM","constants","SECTION_SELECT_DESCRIPTION_VALUE","SECTION_NUMBER_ALL_PLACEHOLDER","CHECKBOX_DESCRIPTION_SUFFIX","actions","init","courseId","pendingPromise","Pending","rebuildSections","observer","MutationObserver","mutations","mutationsSection","filter","mutation","type","addedNodes","length","every","target","classList","contains","mutationsActivities","removedNodes","allRemovedNodes","forEach","item","descendants","getAllDescendants","concat","node","nodeType","document","addEventListener","event","readyState","setTimeout","observe","body","subtree","childList","attributes","characterData","getElementById","setSectionSelection","submitAction","resolve","value","sectionNumber","boxIds","sectionId","j","push","boxId","box","i","checked","action","submitData","moduleIds","moduleId","displayError","Str","get_string","moveToTarget","trim","duplicateToTarget","JSON","stringify","submit","errorText","Promise","then","text","require","notification","alert","catch","promises","Ajax","call","methodname","args","all","data","nodes","allNodes","getDescendants","childNodes","child"],"mappings":"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"}